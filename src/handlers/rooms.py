from aiogram import Router, types
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import re  # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã

from src.db.database_manager import create_room, get_room_by_id

from src.keyboards import miniapp_keyboard

rooms_router = Router()


class RoomStates(StatesGroup):
    waiting_for_room_password = State()


class SelectRoomStates(StatesGroup):
    waiting_for_id = State()
    waiting_for_password = State()


@rooms_router.callback_query(lambda c: c.data == "select_room")
async def process_create_room(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.answer("üî¢<b>–í–≤–µ–¥–∏—Ç–µ id –∫–æ–º–Ω–∞—Ç—ã:</b>", parse_mode="HTML")
    await state.set_state(SelectRoomStates.waiting_for_id)


@rooms_router.message(SelectRoomStates.waiting_for_id)
async def process_room_id_input(message: types.Message, state: FSMContext):
    room_id = message.text.strip()

    if not room_id.isdigit():
        await message.answer("‚ùå <b>ID –∫–æ–º–Ω–∞—Ç—ã –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", parse_mode="HTML")
        return

    room = get_room_by_id(int(room_id))

    if not room:
        await message.answer("‚ùå <b>–ö–æ–º–Ω–∞—Ç–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", parse_mode="HTML")
        return

    await state.update_data(room_id=int(room_id))
    await message.answer("üîë <b>–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:</b>", parse_mode="HTML")
    await state.set_state(SelectRoomStates.waiting_for_password)


@rooms_router.message(SelectRoomStates.waiting_for_password)
async def process_room_password_input(message: types.Message, state: FSMContext):
    room_password = message.text.strip()
    data = await state.get_data()
    room_id = data.get("room_id")

    room = get_room_by_id(room_id)

    if not room or room.password != room_password:
        await message.answer("‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", parse_mode="HTML")
        return

    await message.answer(f"‚úÖ <b>–í—ã –≤–æ—à–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç—É!</b>\nüè† ID: <code>{room_id}</code>", parse_mode="HTML", reply_markup=miniapp_keyboard())
    await state.clear()


@rooms_router.callback_query(lambda c: c.data == "create_room")
async def process_create_room(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.answer("üîë <b>–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤–∞—à–µ–π –∫–æ–º–Ω–∞—Ç—ã:</b>", parse_mode="HTML")
    await state.set_state(RoomStates.waiting_for_room_password)


@rooms_router.message(RoomStates.waiting_for_room_password)
async def process_room_password(message: types.Message, state: FSMContext):
    room_password = message.text.strip()

    if len(room_password) < 6:
        await message.answer("‚ùå <b>–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤.</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                             parse_mode="HTML")
        return

    new_room = create_room(password=room_password)

    await message.answer(
        f"‚úÖ <b>–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n"
        f"üî¢ ID: <code>{new_room.session_id}</code>\n"
        f"üîë –ü–∞—Ä–æ–ª—å: <code>{room_password}</code>",
        parse_mode="HTML"
    )

    await state.clear()
