from aiogram import Router, types, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from src.db.database_manager import create_player
from src.keyboards import get_menu_keyboard
import re

registration_router = Router()


class RegistrationStates(StatesGroup):
    waiting_for_fio = State()
    waiting_for_password = State()


@registration_router.callback_query(lambda c: c.data == "register")
async def process_register(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.answer("‚úç <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:</b>", parse_mode="HTML")
    await state.set_state(RegistrationStates.waiting_for_fio)


def format_fio(fio: str) -> str:
    return " ".join(part.capitalize() for part in fio.split())


def is_valid_fio(fio: str) -> bool:
    parts = fio.split()
    if len(parts) != 3:
        return False
    pattern = r"^[–ê-–Ø–Å–∞-—è—ë]+(?:-[–ê-–Ø–Å–∞-—è—ë]+)?$"
    return all(re.match(pattern, part) for part in parts)


@registration_router.message(F.text, RegistrationStates.waiting_for_fio)
async def process_fio(message: types.Message, state: FSMContext):
    fio = message.text.strip()

    if not is_valid_fio(fio):
        await message.answer("‚ö† <b>–§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ç—Ä—ë—Ö —á–∞—Å—Ç–µ–π –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã.</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                             parse_mode="HTML")
        return

    formatted_fio = format_fio(fio)
    await state.update_data(fio=formatted_fio)
    await message.answer(
        f"‚úÖ <b>–í–∞—à–µ –§–ò–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫:</b> {formatted_fio}\nüîë <b>–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤):</b>",
        parse_mode="HTML")
    await state.set_state(RegistrationStates.waiting_for_password)


@registration_router.message(F.text, RegistrationStates.waiting_for_password)
async def process_password(message: types.Message, state: FSMContext):
    password = message.text.strip()

    if len(password) < 8:
        await message.answer("‚ùå <b>–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤.</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                             parse_mode="HTML")
        return

    data = await state.get_data()
    fio = data.get("fio")
    tg_id = message.from_user.id

    try:
        player = create_player(fio, password, tg_id)
        await message.answer(
            f"üéâ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</b> –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{player.name}</b>! üöÄ\n"
            f"üÜî –í–∞—à Telegram ID: <code>{player.tg_id}</code>",
            reply_markup=get_menu_keyboard(),
            parse_mode="HTML"
        )
        await state.clear()
    except ValueError:
        await message.answer("‚ö† <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.</b>", parse_mode="HTML")
